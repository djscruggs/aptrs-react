import { 
  useState, 
  useEffect,
  ChangeEvent, 
  FormEvent,
  useRef
} from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
// import {Button} from '../components/button'
import {
  StyleTextfield,
  StyleLabel,
  FormErrorMessage,
  ModalErrorMessage
  } from '../lib/formstyles'
import { ExclamationCircleIcon } from '@heroicons/react/24/outline';
import { useVulnerabilityColor } from '../lib/customHooks';
import { WithAuth } from "../lib/authutils";
import { currentUserCan } from '../lib/utilities';
import CKWrapper from '../components/ckwrapper'

import {
  Tabs,
  TabsHeader,
  TabsBody,
  Tab,
  TabPanel,
  Button,
  Dialog
} from "@material-tailwind/react";
import { XCircleIcon } from '@heroicons/react/24/outline';
import ScoreRadioButton from '../components/score-radio-button'
import { FormSkeleton, RowSkeleton } from '../components/skeletons'
import { Vulnerability, Project, ProjectVulnerability, VulnerabilityInstance } from '../lib/data/definitions'
import { getVulnerability, 
        upsertVulnerability, 
        getProject, 
        insertProjectVulnerability, 
        updateProjectVulnerability, 
        getProjectVulnerability, 
        fetchVulnerabilityInstances, 
        deleteVulnerabilityInstances,
        updateProjectInstance,
        insertProjectInstance,
        updateVulnerabilityStatus
      } from '../lib/data/api';

import toast from 'react-hot-toast';
import {List} from "@material-tailwind/react";

interface FormErrors {
  vulnerabilityname?: string
  vulnerabilityseverity?: string
  vulnerabilitydescription?: string
  vulnerabilitysolution?: string
  vulnerabilityscore?: string
  instance?: string
  url?: string
  parameter?: string
  bulkUrls?: string
}
//function to break the vulnerabilitycvssvector into an object for form radio buttons
function parseStringToObject(input: string): Record<string, string | null> {
  const pairs = input.split('/').filter(Boolean); // Split string by '/' and remove empty segments
  const result: Record<string, string | null> = {};
  for (const pair of pairs) {
    const [key, value] = pair.split(':'); // Split key-value pairs by ':'
    result[key] = value !== undefined ? value : null;
  }
  return result;
}

//converts an object representation of vulnerabilitycvssvector and converts it to a string like  e.g. CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N"
function updateStringWithKeyValuePair(input: string | null | undefined, key: string, value: string | null): string {
  if(!input) return ''
  let keyValuePairs: Record<string, string | null> = {};

  if (input) {
    keyValuePairs = parseStringToObject(input);
  }
  keyValuePairs[key] = value;

  const updatedString = Object.entries(keyValuePairs)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
  return updatedString;
}

type CVSSReturn = {
  success?: boolean
  errorType?: string
  baseMetricScore?: string | number | undefined;
  baseSeverity?: string | number | undefined;
  environmentalMetricScore?: string | number | undefined;
  environmentalSeverity?: string | number | undefined;
  temporalMetricScore?: string | number | undefined;
  temporalSeverity?: string | number | undefined;
  vectorString?: string | number | undefined;
}
interface VulnerabilityFormProps {
  action?: 'addToProject' | 'saveToProject'
}
function VulnerabilityForm(props: VulnerabilityFormProps): JSX.Element {
  //calculator is loaded in the base index.html from https://www.first.org/cvss/calculator/cvsscalc31.js
  const calculate: ((vector: string | null | undefined) => CVSSReturn) | undefined = window?.CVSS31.calculateCVSSFromVector;
  const navigate = useNavigate()
  if(!currentUserCan('Manage Vulnerability Data')){
    navigate('/access-denied')
  }
  const [selectedTab, setSelectedTab] = useState('summary')
  const params = useParams()
  const location = useLocation();
  const [projectId, setProjectId] = useState(params.projectId)
  const [project, setProject] = useState<Project>()
  const [id, setId] = useState(params.id)
  const [btnDisabled, setBtnDisabled] = useState(false)
  const [loading, setLoading] = useState(false);
  const [loadingError, setLoadingError] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [errors, setErrors] = useState<FormErrors>({});
  const [editing, setEditing] = useState(false)
  const topOfForm = useRef<HTMLDivElement | null>(null);

  //dialog handler for adding bulk instance(s) -- only used if there is a project id
  const [showDialog, setShowDialog] = useState(false)
  
  let defaultValues:any = {
        vulnerabilityname: "",
        vulnerabilityseverity: "",
        vulnerabilitydescription: "",
        vulnerabilitysolution: "",
        vulnerabilityreferlnk: "",
        cvssvector: "CVSS:3.1/AV:/AC:/PR:/UI:/S:/C:/I:/A:",
        cvssscore: ''
  }
  if(projectId){
    defaultValues.project = projectId;
    defaultValues.poc = '';
    defaultValues.instance= [];
  }
  
  const [formData, setFormData] = useState<Vulnerability | ProjectVulnerability>(defaultValues);
  
  const [scoreData, setScoreData] =useState(parseStringToObject(formData.cvssvector ?? ""))
  const [calculatedScore, setCalculatedScore] = useState<CVSSReturn>(calculate(formData.cvssvector))
  const [instance, setInstance] = useState<VulnerabilityInstance[]>([])
  useEffect(() => {
    const loadData = async () => {
      if (id) {
        setLoading(true);
        try {
          let vData:any
          if(props.action === 'saveToProject') {
            vData = await getProjectVulnerability(id) as  ProjectVulnerability;
          } else {
            vData = await getVulnerability(id) as  Vulnerability;
          }
          
          setFormData((prevData) => ({
            ...prevData,
            ...vData
          }));
          vData.cvssvector && setScoreData(parseStringToObject(vData.cvssvector))
          //also include instance(s) if this is a project
          if(projectId && props.action==='saveToProject'){
            const instance = await fetchVulnerabilityInstances(id)
            setInstance(instance)
          }

        } catch (error) {
          //the api returns 404 if there are no instancess, which is not technically an error, 
          // it just means we haven't saved any instances
          if (typeof error === 'string' && !error.includes('404')) {
            console.error("Error fetching vulnerability data:", error);
            setLoadingError(true);    
          }
        } finally {
          setLoading(false);
        }
      }
    };
    loadData();
  }, [id]);
  useEffect(() => {
    const loadData = async () => {
      if (projectId) {
        setLoading(true);
        try {
          const projectData = await getProject(projectId) as Project;
          setProject(projectData as Project);
        } catch (error) {
          setLoadingError(true);
          // Handle error fetching data
        } finally {
          setLoading(false);
        }
      }
    }
    loadData();
  }, [projectId]);
  // URL
  // Parameter
  // status
  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setEditing(true)
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  //for display of severity
  const [scoreTextColor, setScoreTextColor]=useState('blue-500')
  const [scoreMeaning, setScoreMeaning]=useState('None')
  
  //START CASCADING UPDATES FOR SCORE CHANGE
  //because of the cascading nature of a score change, we have two useEffect calls after a score change to make sure they happen in the right order
  const handleScoreChange = (name: string, value:string): void => {
    setEditing(true)
    setScoreData((prevScoreData) => ({
      ...prevScoreData,
      [name]: value,
    }));
  };
  
  useEffect(() => {
    const newScoreString = Object.entries(scoreData)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["cvssvector"]: newScoreString,
    }));
  }, [scoreData]);
  useEffect(() => {
    let fullScore = calculate(formData.cvssvector)
    setCalculatedScore(fullScore)
    let score = Number(fullScore?.baseMetricScore)
    const [_meaning, _textColor] = useVulnerabilityColor(score)
    setScoreTextColor(_textColor)
    setScoreMeaning(_meaning)
    //for data to save
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["vulnerabilityseverity"]: _meaning,
      ["cvssscore"]: String(fullScore.baseMetricScore),
    }));

  }, [formData.cvssvector]);
  //END cascading score change updates
  //used for modal, not currently in use
  const handleSubmit = async(event: FormEvent<HTMLFormElement>) => {
    setErrors({});
    setSaveError('')
    setBtnDisabled(true);
    event.preventDefault();
    const newErrors: FormErrors = {};
    
    if (formData.vulnerabilityname && formData.vulnerabilityname.length < 3) {
      newErrors.vulnerabilityname = 'Name should be at least three characters';
    }
    if (!formData.vulnerabilitysolution || formData.vulnerabilitysolution === '') {
      newErrors.vulnerabilitysolution = 'Please enter a solution';
    }
    if (!formData.vulnerabilitydescription || formData.vulnerabilitydescription === '') {
      newErrors.vulnerabilitydescription = 'Please enter a description';
    }
    if(!calculatedScore?.baseMetricScore){
      newErrors.vulnerabilityscore = 'Invalid score. Make sure you enter all parameters';
    }
    if(props.action == 'addToProject' || props.action == 'saveToProject') {
      if((instance?.length == 0 && newInstance?.length == 0) || !validateInstance()){
        newErrors.instance = 'Please enter at least one valid URL';
        setSelectedTab('poc')
      }
    }
    if (Object.keys(newErrors).length >  0) {
      setErrors(newErrors);
      if(topOfForm.current && topOfForm.current.scrollIntoView){
        topOfForm.current.scrollIntoView({behavior: "smooth"});
      }
      console.error('Form failed validation:', newErrors);
    } else {
      //if not project id, it's for the vulnerability database
      if(!projectId) {
        try {
          await upsertVulnerability(formData as Vulnerability);
          toast.success('Vulnerability saved.')
          navigate('/vulnerabilities')
          // Handle success (e.g., show success message, redirect, etc.)
        } catch (error) {
          console.error('Error submitting form:', error);
          setSaveError(String(error))
          // Handle error (e.g., show error message)
        } finally {
          setBtnDisabled(false);
        }
      } else {
        return saveProjectVulnerability()
      }
    }
    setBtnDisabled(false);
    
  }
  //this is used to add a vulnerability to a project instead of the vulnerability database
  const saveProjectVulnerability = async() => {
    if(!projectId){
      throw "projectID must be set to saveProjectVulnerability"
    }
    //remove the error member of the objects since it's only for client side
    const newInstanceWithoutError = newInstance.map(({ error, ...rest }) => rest);
    
    const projectVulnerability: ProjectVulnerability = {
      ...formData,
      project: Number(projectId),
      instance: [...instance, ...newInstanceWithoutError]
    }
    //decide whether to insert or update, props.action MUST be set
    if(props.action!='addToProject' && props.action!='saveToProject'){
      throw "Cannot choose whether to insert or updated based on action: " + props.action
    }
    try {
      if(props.action==='addToProject'){
        await insertProjectVulnerability(projectVulnerability)
      } else if(props.action==='saveToProject'){
        await updateProjectVulnerability(projectVulnerability)
      } else {
        throw "Cannot choose whether to insert or updated based on action: " + props.action
      }
      //iterate through existing instances and update
      instance.forEach((i) => {
        delete(i.error)
        updateProjectInstance(i)
      })
      //new instances can be inserted all at once as an array
      if(newInstance?.length > 0){
        insertProjectInstance(id, newInstance)
      }
      toast.success('Project vulnerability saved')
      navigate(`/projects/${projectId}/vulnerabilities`)
    } catch(error: any) {
      toast.error("Save error: " + error)
      console.error(error)
    } 
    setBtnDisabled(false);
  }
  
  const handleCancel = (event: FormEvent<HTMLButtonElement>):void => {
    event?.preventDefault()
    if(editing){
      if(!confirm('Quit without saving?')){
        return;
      }
    }
    if(projectId){
      navigate(`/projects/${projectId}/vulnerabilities`)
    } else {
      navigate(-1)
    }
  }
  const clearDialog = () => {
    setShowDialog(false)
  }
  const handleCKchange = (name:string, value:string):void => {
    setEditing(true)
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  }
  const [newInstance, setNewInstance] = useState<VulnerabilityInstance[]>([])
  const addInstance = (event:any) => {
    event.preventDefault()
    //first validate the previous instance(s)
    if(!validateInstance()){
      return null
    }
    const temp = [...newInstance];
    temp.push({URL: '', Parameter: '', error:false, status:'Vulnerable'})
    setNewInstance(temp)
  }
  const validateInstance = () => {
    //first validate the previous instance(s)
    let valid = true;
    if(!newInstance){
      return true
    }
    const validatedNew = newInstance.map((instance) =>{
      if(!instance.URL){
        instance.error = true;
        valid = false
      } else {
        instance.error = false;
      }
      return instance
    })
    setNewInstance(validatedNew)      
    if(!instance){
      return valid
    }
    const validatedExisting = instance.map((instance) =>{
      if(!instance.URL){
        instance.error = true;
        valid = false
      } else {
        instance.error = false;
      }
      return instance
    })
    setInstance(validatedExisting)      
    return valid
  }
  //which indicates whether to update an existing instance or new
  const handleInstanceChange = (which: 'new'|'existing', key: string, index: number, event:any) => {
    setEditing(true)
    
    const { value } = event.target;
    let updatedInstance
    if(which === 'new') {
      updatedInstance = [...newInstance]; // Create a copy of the array
      updatedInstance[index] = { ...updatedInstance[index], [key]: value };
      setNewInstance(updatedInstance);
    } else {
      updatedInstance = [...instance]; // Create a copy of the array
      updatedInstance[index] = { ...updatedInstance[index], [key]: value };
      setInstance(updatedInstance);
    }
  }
  //handler for adding instance urls in bulk
  const [bulkUrls, setBulkUrls] = useState('');
  const bulkUrlsChange = (event:any) => {
    setEditing(true)
    setBulkUrls(event.target.value);
  }
  const captureBulkUrls = (event:any) => {
    setEditing(true)
    const updated = newInstance
    const lines = bulkUrls.split('\n').map(urlWithParams => {
        const [url, ...parameter] = urlWithParams.trim().split(' '); // Split the line into URL and additional parameters
        return {URL: url, 
                Parameter:parameter.join(' '), 
                status: 'Vulnerable', 
                error: !url };
      });
      const merged = [
        ...updated,
        ...lines
      ] as VulnerabilityInstance[]
      setNewInstance(merged)
    
    setShowDialog(false)  
    setBulkUrls('')
  }
  const addBulkUrls = (event:any) => {

    setShowDialog(true)
  }
  const cancelBulkUrls = (event:any) => {
    setBulkUrls('')
    setShowDialog(false)
  }
  const removeNewInstance = (index: number) => {
    const updated = [...newInstance];
    updated.splice(index, 1);
    setNewInstance(updated)
  }
  const removeSavedInstance = async(index: number) => {
    const id = instance[index].id
    await deleteVulnerabilityInstances([id])
    const updated = [...instance];
    updated.splice(index, 1);
    setInstance(updated)
  }
  const updateInstance = async(index: number) => {
      console.log('updating index', index)
      console.log(instance[index])
      try {
        const updated = await updateProjectInstance(instance[index])
        const statusUpate = await updateVulnerabilityStatus(Number(id), instance[index].status as string)
        console.log('statusUpate',statusUpate)
        toast.success('Instance updated')
        return updated
      } catch (error) {
        console.error('Error updating instance:', error)
        toast.error(String(error))
      }
      
            
    
    // await updateVulnerabilityInstances([id])
  }
  const insertNewInstance = async(index: number) => {
    console.log('newInstance', newInstance[index])
    if(!validateInstance()){
      return
    }
    const data = newInstance[index]
    const result = await insertProjectInstance(id, [data])
    setInstance([...instance, ...newInstance])
    setNewInstance([])
    toast.success('Instance added')
  }
  
  //label for button differs base on whether this is being added to a project, editing for a project, or the vuln db
  const saveLabel =  () =>{
    if(props.action==='saveToProject'){
      return "Save"
    }
    if(props.action==='addToProject'){
      return "Add to Project"
    }
    if(id){
      return "Save Vulnerability"
    }
    return "Add to Database"
  }
  const heading = () =>{
    if(props.action==='saveToProject'){
      return "Edit Project Vulnerablity"
    }
    if(props.action==='addToProject'){
      return "Add Vulnerablity to Project"
    }
    if(id){
      return "Save Vulnerability"
    }
    return "Edit Vulnerability"
  }
  if(loading) return <FormSkeleton numInputs={8} className='max-w-2xl'/>
  if (loadingError) return <ModalErrorMessage message={"Error loading vulnerability"} />
  return (
    <div ref={topOfForm} className="w-[840px] flex-1 rounded-lg min-h-[800px] border-black relative">
      <h1 className="mb-3 text-2xl">
          {heading()}
      </h1>
      {(projectId && !project) && 
        <RowSkeleton />
      }
      {project && 
        <p className="mb-4">Project: {project.name}</p>
      }
       {saveError && <FormErrorMessage message={saveError} />}
      <form onSubmit={handleSubmit} id="vulnerabilityForm" method="POST">
       <Tabs value={selectedTab}>
        <TabsHeader>
            <Tab key="summary" value="summary" onClick={() => setSelectedTab('summary')}>
            {(errors.vulnerabilityname || errors.vulnerabilitydescription || errors.vulnerabilitysolution) && <ExclamationCircleIcon className='inline mb-1 h-6 w-6 mr-1 text-red-500' />}
              Summary
            </Tab>
            <Tab key="score" value="score" onClick={() => setSelectedTab('score')}>
              {errors.vulnerabilityscore && <ExclamationCircleIcon className='inline mb-1 h-6 w-6 mr-1 text-red-500' />}
              Score Calculator
            </Tab>
            {(projectId && "poc" in formData) &&
            <Tab key="poc" value="poc" onClick={() => setSelectedTab('poc')} className={errors.instance ? 'text-red-500' : ''}>
              {errors.instance && <ExclamationCircleIcon className='inline mb-1 h-6 w-6 mr-1' />}
              Proof of Concept
            </Tab>
            }
        </TabsHeader>
        <TabsBody>
            <TabPanel key="summary" value="summary">
            <div className="w-full mb-4">
              <div className="relative">
                <label 
                  htmlFor="vulnerabilityname"
                  className={StyleLabel}>
                  Name
                </label>
                <input
                  name="vulnerabilityname"
                  id="vulnerabilityname"
                  className={StyleTextfield}
                  value={formData.vulnerabilityname}
                  onChange={handleChange}
                  type="text"
                  required={true}
                />
                {errors.vulnerabilityname && <FormErrorMessage message={errors.vulnerabilityname} />}
              </div>
              <div className="relative">
                <label 
                  htmlFor="vulnerabilityseverity"
                  className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                  Severity
                </label>
                {scoreMeaning ? <span className={`text-[${scoreTextColor}]`}>{scoreMeaning}</span> : "Use calculator below"}
              </div>
              <div className="relative">
                <label 
                  htmlFor="vulnerabilitydescription"
                  className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                  Description
                </label>
                {errors.vulnerabilitydescription && <FormErrorMessage message={errors.vulnerabilitydescription} />}
                <CKWrapper
                    id="vulnerabilitydescription"
                    data = {formData.vulnerabilitydescription || ''}
                    onChange={handleCKchange}
                  />
                
              </div>
              <div className="relative">
                <label 
                  htmlFor="vulnerabilitysolution"
                  className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                  Solution
                </label>
                {errors.vulnerabilitysolution && <FormErrorMessage message={errors.vulnerabilitysolution} />}
                <CKWrapper
                    id="vulnerabilitysolution"
                    data = {formData.vulnerabilitysolution || ''}
                    onChange={handleCKchange}
                  />
                
              </div>
              <div className="relative">
                <label 
                  htmlFor="vulnerabilitylink"
                  className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                  Links to more information
                </label>
                <CKWrapper
                    id="vulnerabilityreferlnk"
                    data = {formData.vulnerabilityreferlnk || ''}
                    onChange={handleCKchange}
                  />
                    
              </div>
              
            </div>
            </TabPanel>
            <TabPanel key="score" value="score">
              {errors.vulnerabilityscore && <FormErrorMessage message={errors.vulnerabilityscore} />}
                <div className='mb-4'>
                  
                  Score: <span className={`text-[${scoreTextColor}]`}>
                    {calculatedScore.baseMetricScore} ({scoreMeaning})
                  </span>
                </div>
                <div className="flex min-w-1/2">
                    <div className="column w-full">
                      <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                        <legend className='text-sm mb-0'>Attack Vector</legend>
                        <List>
                        <ScoreRadioButton name='AV' label="Network" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='AV' label="Adjacent" value="A" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='AV' label="Local" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='AV' label="Physical" value="P" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Attack Complexity</legend>
                        <List>
                        <ScoreRadioButton name='AC' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='AC' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Privileges Required</legend>
                        <List>
                        <ScoreRadioButton name='PR' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='PR' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='PR' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>User Interaction</legend>
                        <List>
                        <ScoreRadioButton name='UI' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='UI' label="Required" value="R" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                    </div>
                    <div className="column w-full">
                      <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Scope</legend>
                        <List>
                        <ScoreRadioButton name='S' label="Unchanged" value="U" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='S' label="Changed" value="C" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Confidentiality</legend>
                        <List>
                        <ScoreRadioButton name='C' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='C' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='C' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Integrity</legend>
                        <List>
                        <ScoreRadioButton name='I' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='I' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='I' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                      <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                        <legend className='pt-2 text-sm mb-0'>Availability</legend>
                        <List>
                        <ScoreRadioButton name='A' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='A' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                        <ScoreRadioButton name='A' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                        </List>
                      </fieldset>
                    </div>
                </div>
            
            </TabPanel>
            {(projectId && "poc" in formData) &&
              <TabPanel key="poc" value="poc" className='min-h-96 min-w-fit overflow-visible'>
                <>
                  <div className="relative overflow-visible">
                    <label 
                      htmlFor="poc"
                      className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                      Proof of Concept
                    </label>
                    <CKWrapper
                      id="poc"
                      data = {formData.poc || ''}
                      onChange={handleCKchange}
                    />
                  </div>
                  <div className="relative min-h-[400px]">
                    <label 
                      className={StyleLabel}>
                      Vulnerable URLs
                      </label>
                      {errors.instance && <FormErrorMessage message={errors.instance} />}
                      <div className="table-auto">
                        {(instance?.length > 0 || newInstance?.length > 0) && (
                          <div className='flex'>
                            <div className="flex w-1/2 ">
                              <span className={StyleLabel}>URL</span>
                            </div>
                            <div className='ml-4 w-1/4'>
                              <span className={` ${StyleLabel}`}>
                                Parameter
                              </span>
                            </div>
                            <div>
                              <div className={`ml-4 ${StyleLabel}`}>Status</div>
                            </div>
                          </div>
                        )}
                        <div>
                          {instance && instance.map((item, key) => {
                            return (
                              <div key={`existing-${key}`} className="flex min-w-fit mb-2">
                                <div className="w-1/2 relative" key={`url-${key}`}>
                                  <input
                                    name={`existing-URL-${key}`}
                                    autoFocus
                                    id={`existing-URL-${key}`}
                                    className={item.error ? `border border-red-500 ${StyleTextfield}` : StyleTextfield}
                                    value={item.URL}
                                    onChange={(event: any) => handleInstanceChange('existing','URL', key, event)}
                                    onBlur={validateInstance}
                                    type="text"
                                    required={true}
                                  />
                                  {item.error && <div className='absolute -bottom-8'><FormErrorMessage message="Invalid url" /></div>}
                                </div>
                                <div key={`existing-Parameter-${key}`} className='ml-4 flex items-start w-1/4'>
                                  <input
                                    name={`existing-Parameter-${key}`}
                                    id={`existing-Parameter-${key}`}
                                    className={StyleTextfield}
                                    value={item.Parameter}
                                    onChange={(event: any) => handleInstanceChange('existing','Parameter', key, event)}
                                    type="text"
                                  />
                                  
                                </div>
                                <div key={`existing-status-${key}`} className='ml-4 flex items-start'>
                                  <select 
                                      name={`existing-status-${key}`}
                                      id={`existing-status-${key}`}
                                      value={item.status} 
                                      className='peer block min-w-full rounded-md border border-gray-200 py-[9px] pl-2 text-sm outline-2 placeholder:text-gray-500'
                                      onChange={(event: any) => handleInstanceChange('existing','status', key, event)}
                                    >
                                      
                                    {['Vulnerable', 'Confirm Fixed','Accepted Risk'].map((status =>
                                        <option key={`existing-status-${key}-${status}`} value={status}>{status}</option>
                                  ))}
                                    </select>
                                </div>
                                <div className='flex items-center ml-1 -mt-1'>
                                  {id && <Button className='bg-primary mx-1 p-1.5'  onClick={()=>updateInstance(key)}>Save</Button>}
                                  <XCircleIcon onClick={() => removeSavedInstance(key)} className="text-secondary w-5 h-5 bg-white cursor-pointer" />
                                </div>
                                
                                
                                
                              </div>
                            );
                          })}
                          {(instance?.length === 0 && newInstance?.length === 0) && (
                            <div className='flex'>
                              <div >No URLs. Click Add URL to create.</div>
                            </div>
                          )}
                          {newInstance && newInstance.map((item, key) => {
                            return (
                              <div key={`new-instance-${key}`} className="flex min-w-fit mb-4">
                                <div className="w-1/2 relative" key={`url-${key}`}>
                                  <input
                                    name={`new-URL-${key}`}
                                    autoFocus
                                    id={`new-URL-${key}`}
                                    placeholder='http://www.example.com'
                                    className={item.error ? `border border-red-500 ${StyleTextfield}` : StyleTextfield}
                                    value={item.URL}
                                    onChange={(event: any) => handleInstanceChange('new','URL', key, event)}
                                    onBlur={validateInstance}
                                    type="text"
                                    required={true}
                                  />
                                  {item.error && <div className='absolute -bottom-8'><FormErrorMessage message="Invalid url" /></div>}
                                </div>
                                <div key={`new-parameter-${key}`} className='w-1/4 ml-4 flex items-start'>
                                  <input
                                    name={`new-Parameter-${key}`}
                                    id={`new-Parameter-${key}`}
                                    placeholder='parameter'
                                    className={StyleTextfield}
                                    value={item.Parameter}
                                    onChange={(event: any) => handleInstanceChange('new','Parameter', key, event)}
                                    type="text"
                                  />
                                </div>
                                <div key={`new-status-${key}`} className='ml-4 flex items-start'>
                                  {/* "Vulnerable" | "Confirm Fixed" | "Accepted Risk" */}
                                  <select 
                                      name={`new-status-${key}`}
                                      value={item.status} 
                                      className='peer block min-w-full rounded-md border border-gray-200 py-[9px] pl-2 text-sm outline-2 placeholder:text-gray-500'
                                      onChange={(event: any) => handleInstanceChange('new','status', key, event)}
                                    >
                                    <option value=''>Select...</option>
                                    {['Vulnerable', 'Confirm Fixed','Accepted Risk'].map((status =>
                                        <option key={`new-status-${key}-${status}`} value={status}>{status}</option>
                                  ))}
                                  </select>
                                </div>
                                <div className='flex items-center ml-1 -mt-1'>
                                  {id && <Button className='bg-primary mx-1 p-1.5'  onClick={()=>insertNewInstance(key)}>Save</Button>}
                                  <XCircleIcon onClick={() => removeNewInstance(key)} className="text-secondary w-5 h-5 bg-white cursor-pointer" />
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                      <Button onClick={addInstance} className='bg-secondary mt-4' size='sm'>Add URL</Button>
                      <Button onClick={addBulkUrls}
                        className="bg-primary cursor-pointer disabled:bg-gray-300 mt-4 ml-2" size='sm'>
                        Add Multiple
                      </Button>
                      <Dialog handler={clearDialog} open={showDialog} size="sm" className="modal-box w-[500px] bg-white p-4 rounded-md" >
                        <label 
                          htmlFor="bulkUrls"
                          className={StyleLabel}>
                          Enter URLs with (optional) parameters, one per line, URL first on each line
                        </label>
                        <textarea
                          name="bulkUrls"
                          id="bulkUrls"
                          placeholder='http://www.example.com'
                          rows={8}
                          className={StyleTextfield}
                          value={bulkUrls}
                          onChange={bulkUrlsChange}
                        />
                        <Button 
                          onClick={captureBulkUrls}
                          className="bg-primary cursor-pointer disabled:bg-gray-300 mt-2"
                          disabled = {bulkUrls.trim() === ''}
                          >
                          Add
                        </Button>
                        <Button onClick={cancelBulkUrls}
                          className="bg-red-600 cursor-pointer disabled:bg-gray-300 mt-2 ml-2">
                          Cancel
                        </Button>
                      </Dialog>

                  </div>
                </>
              </TabPanel>
            }
          </TabsBody>
        </Tabs>
        <div className="fixed bottom-2 left-80 z-50">
          <Button 
            type="submit" 
            className="bg-primary cursor-pointer disabled:bg-gray-300"
            disabled = {btnDisabled}>
            {saveLabel()} 
          </Button>
          <Button 
            type="submit" 
            className="bg-red-600 cursor-pointer disabled:bg-gray-300 ml-2"
            onClick={handleCancel}
            >
              Cancel
          </Button>
        </div>
        
      </form>
    </div>
  );
}
type OpenIconProps = {
  open: boolean
};
function OpenIcon({ open }:OpenIconProps) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={2}
      stroke="currentColor"
      className={`${open ? "rotate-180" : ""} h-5 w-5 transition-transform`}
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  );
}

export default WithAuth(VulnerabilityForm);
