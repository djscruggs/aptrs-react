import { useState, useEffect,  } from 'react'
import { useDebounce } from '@uidotdev/usehooks'
import { currentUserCan } from '../lib/utilities'
import { 
  searchVulnerabilities
} from '../lib/data/api'
import { 
  List, 
  ListItem
} from '@material-tailwind/react';
import { StyleTextfield } from '../lib/formstyles';

interface VulnerabilityNameInputProps {
  onSelect: (vulnerabilityId: number) => void
  value: string
  searchComplete: boolean
  onChange: (value: string) => void
}

export default function VulnerabilityNameInput(props: VulnerabilityNameInputProps): JSX.Element {
  const [searchValue, setSearchValue] = useState(props.value)
  const [searchComplete, setSearchComplete] = useState(props.searchComplete)
  const debouncedValue = useDebounce<string>(searchValue, 200)
  const [searchResults, setSearchResults] = useState<{ id:number, vulnerabilityname: string }[]>([])
  
  

  const handleSelectedSearchItem = (vid: number) => {
    props.onSelect(vid)
    setSearchResults([])
  }
  useEffect(() => {
    if(debouncedValue && !searchComplete){
      searchVulnerabilities(debouncedValue).then((data) => {
        //filter out the ones that are already in the project
        setSearchResults(data);
      }).catch((error) => {
        console.error(error)
        // toast.error(error.)
      })
    }
  }, [debouncedValue])
  useEffect(() => {
    setSearchComplete(props.searchComplete)
  }, [props.searchComplete])

  const handleNameSearch = (event:any) => {
    setSearchValue(event.target.value)
    props.onChange(event.target.value)
    if(event.target.value==''  || event.key === 'Backspace'){
      setSearchResults([])
      setSearchComplete(false); // Set searchComplete to false when input is cleared
    }
  }
  return (
            <>
                
                {currentUserCan('Manage Projects') &&
                  <div className="relative max-w-xl">
                    <input 
                      list="searchResults" 
                      value={searchValue} 
                      className={StyleTextfield}
                      type="text" 
                      
                      onChange={handleNameSearch} 
                    />
                    <List className={`max-w-xl absolute bg-white border border-t-0 -mt-0.50 pt-4 border-gray-200 p-0 rounded-b-md z-10 ${searchValue && searchResults.length > 0 ? 'block' : 'hidden'}`} key='searchResults'>
                        {searchValue && searchResults.map((item)=>{
                            return <div key={`search-${item.id}`}><ListItem  onClick={()=>handleSelectedSearchItem(item?.id)} >{item?.vulnerabilityname}</ListItem></div>
                          })
                        }
                    </List>
                    
                    
                  </div>
                }
   </>
  )
}